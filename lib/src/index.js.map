{"version":3,"sources":["src/index.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;AAEb,+CAA+C;AAE/C,gFAAsE;AACtE,wEAAuE;AAIvE,iDAA8C;AAErC,uBAFA,2BAAY,CAEA;AAyCrB;;;;;;;GAOG;AACH,gBAA6B,IAAY,EAAE,OAAuB;;QAChE,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;QAC7C,IAAI,MAAgB,CAAC;QACrB,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YACvC,SAAS,CAAC,IAAI,GAAG,MAAM,2BAAa,EAAE,CAAC;YACvC,MAAM,GAAG,MAAM,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC9C,CAAC;QACD,IAAI,CAAC;YACH,MAAM,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACzC,CAAC;gBAAS,CAAC;YACT,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACX,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;YACtB,CAAC;QACH,CAAC;IACH,CAAC;CAAA;AAdD,wBAcC;AAED;;;;;;GAMG;AACH,kBAAwB,IAAY,EAAE,OAAsB;;QAC1D,MAAM,CAAC,IAAI,OAAO,CAAe,CAAC,OAAO,EAAE,MAAM;YAC/C,GAAG,CAAC,OAAO,EAAE,CAAO,MAAM;gBACxB,IAAI,CAAC;oBACH,MAAM,EAAC,IAAI,EAAC,GAAG,MAAM,CAAC;oBACtB,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,qBAAqB;oBAC1C,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,IAAI,GAAG,kBAAkB,IAAI,EAAE,CAAC;oBACpF,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAC,GAAG,EAAC,CAAC,CAAC;oBAC3B,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;oBAC5B,wFAAwF;oBACxF,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;oBACxD,MAAM,CAAC,OAAO,CAAC,IAAI,2BAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC7C,CAAC;gBAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACb,MAAM,CAAC,GAAG,CAAC,CAAC;gBACd,CAAC;wBAAS,CAAC;oBACT,MAAM,CAAC,KAAK,EAAE,CAAC;gBACjB,CAAC;YACH,CAAC,CAAA,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG;gBACjB,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CAAA;AAED;;;;;GAKG;AACH,sBAA4B,IAAY;;QACtC,MAAM,QAAQ,GAAG,IAAI,0BAAQ,CAAC;YAC5B,IAAI;YACJ,WAAW,EAAE;gBACX,eAAe;gBACf,YAAY;aACb;SACF,CAAC,CAAC;QACH,IAAI,CAAC;YACH,MAAM,QAAQ,CAAC,MAAM,EAAE,CAAC;YACxB,MAAM,CAAC,QAAQ,CAAC;QAClB,CAAC;QAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACb,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YACtB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC;CAAA","file":"index.js","sourcesContent":["'use strict';\n\nimport * as CDP from 'chrome-remote-interface';\nimport * as fs from 'fs';\nimport { Launcher } from 'lighthouse/chrome-launcher/chrome-launcher';\nimport { getRandomPort } from 'lighthouse/chrome-launcher/random-port';\nimport { Readable, Stream } from 'stream';\n\nimport { ChromePrintOptions } from './ChromePrintOptions';\nimport { CreateResult } from './CreateResult';\n\nexport { CreateResult };\n\n/**\n * PDF generation options.\n *\n * @export\n * @interface CreateOptions\n */\nexport interface CreateOptions {\n  /**\n   * The host to connect to Chrome at.\n   * If set, it attempts to connect to Chrome.\n   * If this and port are not set, it spawns\n   * Chrome for the duration of the PDF generation.\n   *\n   * @type {string}\n   * @memberof CreateOptions\n   */\n  host?: string;\n\n  /**\n   * The port to connect to Chrome with.\n   * If set, it attempts to connect to Chrome.\n   * If this and host are not set, it spawns\n   * Chrome for the duration of the PDF generation.\n   *\n   * @type {number}\n   * @memberof CreateOptions\n   */\n  port?: number;\n\n  /**\n   * The options to pass to Chrome's Page.printToPDF.\n   * Note: these require Chrome >= 60.\n   *\n   * @type {ChromePrintOptions}\n   * @memberof CreateOptions\n   */\n  printOptions?: ChromePrintOptions;\n}\n\n/**\n * Generates a PDF from the given HTML string, launching Chrome as necessary.\n *\n * @export\n * @param {string} html the HTML string.\n * @param {Options} [options] the generation options.\n * @returns {Promise<CreateResult>} the generated PDF data.\n */\nexport async function create(html: string, options?: CreateOptions): Promise<CreateResult> {\n  const myOptions = Object.assign({}, options);\n  let chrome: Launcher;\n  if (!myOptions.host && !myOptions.port) {\n    myOptions.port = await getRandomPort();\n    chrome = await launchChrome(myOptions.port);\n  }\n  try {\n    return await generate(html, myOptions);\n  } finally {\n    if (chrome) {\n      await chrome.kill();\n    }\n  }\n}\n\n/**\n * Connects to Chrome and generates a PDF from HTML or a URL.\n *\n * @param {string} html the HTML string or URL.\n * @param {CreateOptions} options the generation options.\n * @returns {Promise<CreateResult>} the generated PDF data.\n */\nasync function generate(html: string, options: CreateOptions): Promise<CreateResult>  {\n  return new Promise<CreateResult>((resolve, reject) => {\n    CDP(options, async (client) => {\n      try {\n        const {Page} = client;\n        await Page.enable(); // Enable Page events\n        const url = html.toLowerCase().startsWith('http') ? html : `data:text/html,${html}`;\n        await Page.navigate({url});\n        await Page.loadEventFired();\n        // https://chromedevtools.github.io/debugger-protocol-viewer/tot/Page/#method-printToPDF\n        const pdf = await Page.printToPDF(options.printOptions);\n        return resolve(new CreateResult(pdf.data));\n      } catch (err) {\n        reject(err);\n      } finally {\n        client.close();\n      }\n    }).on('error', (err) => {\n      reject(err);\n    });\n  });\n}\n\n/**\n * Launches Chrome and listens on the specified port.\n *\n * @param {number} port the port for the launched Chrome to listen on.\n * @returns {Promise<Launcher>} The launched Launcher instance.\n */\nasync function launchChrome(port: number): Promise<Launcher> {\n  const launcher = new Launcher({\n    port,\n    chromeFlags: [\n      '--disable-gpu',\n      '--headless',\n    ],\n  });\n  try {\n    await launcher.launch();\n    return launcher;\n  } catch (err) {\n    await launcher.kill();\n    return Promise.reject(err);\n  }\n}\n"],"sourceRoot":"../.."}