{"version":3,"sources":["src/index.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;AAEb,+CAA+C;AAE/C,+EAA2E;AAC3E,uEAAsE;AAGtE,iDAA8C;AAErC,uBAFA,2BAAY,CAEA;AA8HrB;;;;;;;GAOG;AACH,gBAA6B,IAAY,EAAE,OAAuB;;QAChE,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;QAC7C,IAAI,MAAsB,CAAC;QAC3B,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YACpB,SAAS,CAAC,IAAI,GAAG,MAAM,2BAAa,EAAE,CAAC;YACvC,MAAM,GAAG,MAAM,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC9C,CAAC;QACD,IAAI,CAAC;YACH,MAAM,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACzC,CAAC;gBAAS,CAAC;YACT,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACX,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;YACtB,CAAC;QACH,CAAC;IACH,CAAC;CAAA;AAdD,wBAcC;AAED;;;;;;GAMG;AACH,kBAAwB,IAAY,EAAE,OAAsB;;QAC1D,MAAM,CAAC,IAAI,OAAO,CAAe,CAAC,OAAO,EAAE,MAAM;YAC/C,GAAG,CAAC,OAAO,EAAE,CAAO,MAAM;gBACxB,IAAI,CAAC;oBACH,MAAM,EAAC,IAAI,EAAC,GAAG,MAAM,CAAC;oBACtB,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,qBAAqB;oBAC1C,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAC,GAAG,EAAE,kBAAkB,IAAI,EAAE,EAAC,CAAC,CAAC;oBACrD,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;oBAC5B,wFAAwF;oBACxF,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;oBACxD,MAAM,CAAC,OAAO,CAAC,IAAI,2BAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC7C,CAAC;gBAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACb,MAAM,CAAC,GAAG,CAAC,CAAC;gBACd,CAAC;wBAAS,CAAC;oBACT,MAAM,CAAC,KAAK,EAAE,CAAC;gBACjB,CAAC;YACH,CAAC,CAAA,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG;gBACjB,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CAAA;AAED;;;;;GAKG;AACH,sBAA4B,IAAY;;QACtC,MAAM,QAAQ,GAAG,IAAI,gCAAc,CAAC;YAClC,IAAI;YACJ,gBAAgB,EAAE,IAAI;YACtB,eAAe,EAAE;gBACf,eAAe;gBACf,YAAY;aACb;SACF,CAAC,CAAC;QACH,IAAI,CAAC;YACH,MAAM,QAAQ,CAAC,GAAG,EAAE,CAAC;YACrB,MAAM,CAAC,QAAQ,CAAC;QAClB,CAAC;QAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACb,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YACtB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC;CAAA","file":"index.js","sourcesContent":["'use strict';\n\nimport * as CDP from 'chrome-remote-interface';\nimport * as fs from 'fs';\nimport { ChromeLauncher } from 'lighthouse/lighthouse-cli/chrome-launcher';\nimport { getRandomPort } from 'lighthouse/lighthouse-cli/random-port';\nimport { Readable, Stream } from 'stream';\n\nimport { CreateResult } from './CreateResult';\n\nexport { CreateResult };\n\n/**\n * PDF generation options.\n *\n * @export\n * @interface CreateOptions\n */\nexport interface CreateOptions {\n  /**\n   * The port to connect to Chrome with.\n   * If set, it attempts to connect to Chrome.\n   * If not set, it spawns Chrome for the duration\n   * of the PDF generation.\n   *\n   * @type {number}\n   * @memberof CreateOptions\n   */\n  port?: number;\n\n  /**\n   * The options to pass to Chrome's Page.printToPDF.\n   *\n   * @type {ChromePrintOptions}\n   * @memberof CreateOptions\n   */\n  printOptions?: ChromePrintOptions;\n}\n\n/**\n * Chrome Page.printToPDF options.\n *\n * @export\n * @interface ChromePrintOptions\n */\nexport interface ChromePrintOptions {\n  /**\n   * Paper orientation. Defaults to false.\n   *\n   * @type {boolean}\n   * @memberof ChromePrintOptions\n   */\n  landscape?: boolean;\n\n  /**\n   * Display header and footer. Defaults to false.\n   *\n   * @type {boolean}\n   * @memberof ChromePrintOptions\n   */\n  displayHeaderFooter?: boolean;\n\n  /**\n   * Print background graphics. Defaults to false.\n   *\n   * @type {boolean}\n   * @memberof ChromePrintOptions\n   */\n  printBackground?: boolean;\n\n  /**\n   * Scale of the webpage rendering. Defaults to 1.\n   *\n   * @type {number}\n   * @memberof ChromePrintOptions\n   */\n  scale?: number;\n\n  /**\n   * Paper width in inches. Defaults to 8.5 inches.\n   *\n   * @type {number}\n   * @memberof ChromePrintOptions\n   */\n  paperWidth?: number;\n\n  /**\n   * Paper height in inches. Defaults to 11 inches.\n   *\n   * @type {number}\n   * @memberof ChromePrintOptions\n   */\n  paperHeight?: number;\n\n  /**\n   * Top margin in inches. Defaults to 1cm (~0.4 inches).\n   *\n   * @type {number}\n   * @memberof ChromePrintOptions\n   */\n  marginTop?: number;\n\n  /**\n   * Bottom margin in inches. Defaults to 1cm (~0.4 inches).\n   *\n   * @type {number}\n   * @memberof ChromePrintOptions\n   */\n  marginBottom?: number;\n\n  /**\n   * Left margin in inches. Defaults to 1cm (~0.4 inches).\n   *\n   * @type {number}\n   * @memberof ChromePrintOptions\n   */\n  marginLeft?: number;\n\n  /**\n   * Right margin in inches. Defaults to 1cm (~0.4 inches).\n   *\n   * @type {number}\n   * @memberof ChromePrintOptions\n   */\n  marginRight?: number;\n\n  /**\n   * Paper ranges to print, e.g., '1-5, 8, 11-13'.\n   * Defaults to the empty string, which means print all pages.\n   *\n   * @type {string}\n   * @memberof ChromePrintOptions\n   */\n  pageRanges?: string;\n}\n\n/**\n * Generates a PDF from the given HTML string, launching Chrome as necessary.\n *\n * @export\n * @param {string} html the HTML string.\n * @param {Options} [options] the generation options.\n * @returns {Promise<CreateResult>} the generated PDF data.\n */\nexport async function create(html: string, options?: CreateOptions): Promise<CreateResult> {\n  const myOptions = Object.assign({}, options);\n  let chrome: ChromeLauncher;\n  if (!myOptions.port) {\n    myOptions.port = await getRandomPort();\n    chrome = await launchChrome(myOptions.port);\n  }\n  try {\n    return await generate(html, myOptions);\n  } finally {\n    if (chrome) {\n      await chrome.kill();\n    }\n  }\n}\n\n/**\n * Connects to Chrome and generates a PDF from HTML.\n *\n * @param {string} html the HTML string.\n * @param {CreateOptions} options the generation options.\n * @returns {Promise<CreateResult>} the generated PDF data.\n */\nasync function generate(html: string, options: CreateOptions): Promise<CreateResult>  {\n  return new Promise<CreateResult>((resolve, reject) => {\n    CDP(options, async (client) => {\n      try {\n        const {Page} = client;\n        await Page.enable(); // Enable Page events\n        await Page.navigate({url: `data:text/html,${html}`});\n        await Page.loadEventFired();\n        // https://chromedevtools.github.io/debugger-protocol-viewer/tot/Page/#method-printToPDF\n        const pdf = await Page.printToPDF(options.printOptions);\n        return resolve(new CreateResult(pdf.data));\n      } catch (err) {\n        reject(err);\n      } finally {\n        client.close();\n      }\n    }).on('error', (err) => {\n      reject(err);\n    });\n  });\n}\n\n/**\n * Launches Chrome and listens on the specified port.\n *\n * @param {number} port the port for the launched Chrome to listen on.\n * @returns {Promise<ChromeLauncher>} The launched ChromeLauncher instance.\n */\nasync function launchChrome(port: number): Promise<ChromeLauncher> {\n  const launcher = new ChromeLauncher({\n    port,\n    autoSelectChrome: true,\n    additionalFlags: [\n      '--disable-gpu',\n      '--headless',\n    ],\n  });\n  try {\n    await launcher.run();\n    return launcher;\n  } catch (err) {\n    await launcher.kill();\n    return Promise.reject(err);\n  }\n}\n"],"sourceRoot":"../.."}